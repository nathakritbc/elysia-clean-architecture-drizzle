services:
  app:
    build:
      context: .
    restart: unless-stopped
    environment:
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 7000
      DATABASE_URL: postgresql://postgres:12345678@postgres:5432/elysia_db
      OTEL_ENABLED: 'true'
      OTEL_SERVICE_NAME: elysia-clean-architecture
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    ports:
      - '7000:7000'
    networks:
      - monitoring

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: '12345678'
      POSTGRES_USER: postgres
      POSTGRES_DB: elysia_db
    volumes:
      - clean_backend_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d elysia_db']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    networks:
      - monitoring

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.101.0
    restart: unless-stopped
    command: ['--config=/etc/otelcol/config.yaml']
    volumes:
      - ./docker/otel-collector/config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - '4317:4317'
      - '4318:4318'
      - '9464:9464'
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    depends_on:
      - otel-collector
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - monitoring

  loki:
    image: grafana/loki:3.0.0
    restart: unless-stopped
    command: ['-config.file=/etc/loki/config/loki-config.yml']
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/config/loki-config.yml:ro
      - loki-data:/loki
    environment:
      - LOKI_SERVER_HTTP_LISTEN_PORT=3100
    expose:
      - '7946'
    ports:
      - '3100:3100'
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:3.0.0
    restart: unless-stopped
    command: ['-config.file=/etc/promtail/config.yml']
    depends_on:
      - loki
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:2.4.0
    restart: unless-stopped
    command: ['-config.file=/etc/tempo/config.yaml']
    volumes:
      - ./docker/tempo/tempo-config.yaml:/etc/tempo/config.yaml:ro
      - tempo-data:/var/tempo
    ports:
      - '3200:3200' # HTTP API / Tempo Query
    networks:
      - monitoring

volumes:
  clean_backend_pg_data:
  grafana-data:
  loki-data:
  tempo-data:

networks:
  monitoring:
    driver: bridge
